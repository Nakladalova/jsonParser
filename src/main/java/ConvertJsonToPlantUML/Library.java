/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ConvertJsonToPlantUML;
import java.util.*; 

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Paths;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;
import java.util.List;
import java.util.ArrayList;
import java.util.HashMap;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ArrayNode;


public class Library {
	
	public static void main(String[] args) throws JsonMappingException, JsonProcessingException {
		String nameOfClass=null;
		 JsonNode objectNode=null; 
		 HashMap<String, JsonNode> classDescriptions = new HashMap<String, JsonNode>();

		try {
			/*System.out.println("Write name of folder: ");
			Scanner sc= new Scanner(System.in);
			String nameOfFolder = sc.nextLine(); */
			File folder = new File("jsonFiles");
			File[] listOfFiles = folder.listFiles();
			ObjectMapper mapper = new ObjectMapper();
			
			
			for (int i = 0; i < listOfFiles.length; i++) {
			  if (listOfFiles[i].isFile()) {
			    objectNode = mapper.readTree(listOfFiles[i]);
			    nameOfClass = objectNode.path("name").asText();
			    System.out.println(nameOfClass);
			    classDescriptions.put(nameOfClass, objectNode);
			  
			   }
			}
			
			for (int i = 0; i < listOfFiles.length; i++) {
				  if (listOfFiles[i].isFile()) {
				    objectNode = mapper.readTree(listOfFiles[i]);
				    System.out.println(validateAssociations(objectNode, classDescriptions));
					  
				   }
				}

			} catch (Exception ex) {
			    ex.printStackTrace();
			}
		
		createPlantUMLFile(classDescriptions);

		 }
	
	public static void createPlantUMLFile(HashMap<String, JsonNode> classDescriptions) {
		Scanner sc= new Scanner(System.in);
		/*System.out.println("Zadejte jméno souboru pro zápis \n");
		String nameOfFile = sc.nextLine(); */
		JsonNode objectNode=null; 
		String nameOfClass=null;
		ArrayNode nodeFields=null;
	    int size;
		
		try (BufferedWriter bw = new BufferedWriter(new FileWriter("plantUML.txt"))) //zapsani do souboru
		{
			bw.write("@startuml\n");
			bw.write("Agent \"many\" --* \"1\" Team:team\n\n");
			for ( String key : classDescriptions.keySet() ) {
				objectNode = classDescriptions.get(key);
				nameOfClass = objectNode.path("name").asText();
				nodeFields = (ArrayNode)objectNode.get("fields");
			    size= nodeFields.size();
				bw.write("class " + nameOfClass + " {\n");
				for(int j=0; j<size; j++) {
			    	JsonNode nodeField = nodeFields.get(j);
			    	String type = nodeField.path("type").asText();
			    	String mandatory = nodeField.path("mandatory").asText();
			    	if(type.equals("Association")) {
			    		continue;
			    	}
			    	if(mandatory.equals("true")) {
			    		bw.write((" ") + nodeField.get("name") + (" : * ")+ nodeField.path("type").asText() +("\n"));
			    		continue;
			    	}
			    	bw.write((" ") + nodeField.get("name") + (" : ")+ nodeField.path("type").asText() +("\n"));
				 }
				 
				 bw.write("}\n\n");
			}
			 
			 bw.write("@enduml");
			bw.close();
		}
		catch (Exception e)
		{
		    System.err.println("Do souboru se nepovedlo zapsat.");
		}
		
	  }
	
	
	public static Boolean validateAssociations(JsonNode objectNode, HashMap<String, JsonNode> classDescriptions) {
		ArrayNode nodeFields = (ArrayNode)objectNode.get("fields");
	    int size = nodeFields.size();
	    for(int i=0; i<size; i++) {
	    	JsonNode nodeField = nodeFields.get(i);
	    	String type = nodeField.path("type").asText();
	    	if(type.equals("Association")) {
	    		String referencedEntity = nodeField.path("referencedEntity").asText();
	    		JsonNode root = classDescriptions.get(referencedEntity);
	    		if(root!=null) {
	    			return true;
	    		}
	    		
	    	}
	    }
		
		return false;
		
	}
  
		 
    public boolean someLibraryMethod() {
        return true;
    }
    
   
}




