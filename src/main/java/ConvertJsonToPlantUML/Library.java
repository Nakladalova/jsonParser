/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ConvertJsonToPlantUML;
import java.util.*;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Paths;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;
import java.util.List;
import java.util.ArrayList;
import java.util.HashMap;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ArrayNode;

public class Library {
	
	public static void main(String[] args) throws JsonMappingException, JsonProcessingException {
		
		HashMap<String, String> classAssociations = new HashMap<String, String>();
		if(args.length<4) {
			System.err.println("One of the required arguments is empty");
		}
		String args0 = args[0];
		String args1 = args[1];
		String args2 = args[2];
		String args3 = args[3];
		String inputArg ="-i";
		String outputArg ="-o";
		if(args0.equals(inputArg)) {
			if (args2.equals(inputArg)) {
				System.err.println("Two of the required arguments contains input value.");
			}
			else if (!args2.equals(outputArg)) {
				System.err.println("Required argument does not contain output value.");
			}
		}
		if(args0.equals(outputArg) ) {
			if (args2.equals(outputArg)) {
				System.err.println("Two of the required arguments contains output value.");
			}
			else if (!args2.equals(inputArg)) {
				System.err.println("Required argument does not contain input value");
			}
		}
		
		String currentDirectory1=null;
		String currentDirectory2=null;
		if(args1.equals(".")) {
			currentDirectory1 = System.getProperty("user.dir");
			System.out.println("Working Directory = " + currentDirectory1);
			
		}
		if(args3.equals(".")) {
			currentDirectory2 = System.getProperty("user.dir");
			System.out.println("Working Directory = " + currentDirectory2);
		}
		
		
		String nameOfClass=null;
		JsonNode objectNode=null; 
		HashMap<String, JsonNode> classDescriptions = new HashMap<String, JsonNode>();

		try {
			File folder= null;
	        if(args0.equals(inputArg)) {
	        	if(currentDirectory1!=null) {
	        		folder = new File(currentDirectory1);
	        	}
	        	else {
	        		folder = new File(args1);
	        	}    
	        }
	        else if(args2.equals(inputArg)){
	        	if(currentDirectory2!=null) {
	        		folder = new File(currentDirectory2);
	        	}
	        	else {
	        		folder = new File(args3);
	        	}   
	        }
			
			File[] listOfFiles = folder.listFiles();
			ObjectMapper mapper = new ObjectMapper();
			
			
			for (int i = 0; i < listOfFiles.length; i++) {
			  if (listOfFiles[i].isFile()) {
			    objectNode = mapper.readTree(listOfFiles[i]);
			    nameOfClass = objectNode.path("name").asText();
			    System.out.println(nameOfClass);
			    classDescriptions.put(nameOfClass, objectNode);
			  
			   }
			}
			
			for (int i = 0; i < listOfFiles.length; i++) {
				  if (listOfFiles[i].isFile()) {
				    objectNode = mapper.readTree(listOfFiles[i]);
				    System.out.println(validateAssociations(objectNode, classDescriptions, classAssociations));  
				   }
				}

			} catch (Exception ex) {
			    ex.printStackTrace();
			}
		
		String outputPath=null;
		if(args0.equals(outputArg)) {
			outputPath = args1;
	     }
	    else if(args2.equals(outputArg)){
	    	outputPath = args3;
	     }
	
		createPlantUMLFile(classDescriptions, classAssociations, outputPath);

		 }
	
		public static void createPlantUMLFile(HashMap<String, JsonNode> classDescriptions, HashMap<String, String> classAssociations,String outputPath) {
			Scanner sc= new Scanner(System.in);
			String sysId=null;
			String length=null;
			JsonNode objectNode=null; 
			String nameOfClass=null;
			String nameOfAssociatedClass=null;
			ArrayNode nodeFields=null;
			ArrayNode valueFields=null;
		    int size;
			
			try (BufferedWriter bw = new BufferedWriter(new FileWriter(outputPath + "\\"+"plantUML.txt"))) 
			{
				bw.write("@startuml\n");
				for ( String key : classAssociations.keySet() ) {
					nameOfAssociatedClass = classAssociations.get(key);
					bw.write(key + (" \"many\" --* \"1\" " + nameOfAssociatedClass + ":" + nameOfAssociatedClass.toLowerCase() + ("\n")));
				}
				bw.write("\n");
				for ( String key : classDescriptions.keySet() ) {
					objectNode = classDescriptions.get(key);
					nameOfClass = objectNode.path("name").asText();
					sysId=objectNode.path("sysId").asText();
					nodeFields = (ArrayNode)objectNode.get("fields");
				    size= nodeFields.size();
					bw.write("class " + nameOfClass + " {\n");
					bw.write("\"sysId \"" + (" : ")+ sysId+ ("\n"));
					for(int j=0; j<size; j++) {
				    	JsonNode nodeField = nodeFields.get(j);
				    	String type = nodeField.path("type").asText();
				    	length = nodeField.path("length").asText();
				    	String mandatory = nodeField.path("mandatory").asText();
				    	String defaultValue = nodeField.path("defaultValue").asText();
				    	valueFields = (ArrayNode)objectNode.get("fields").get("values");
				    	if(type.equals("Association")) {
				    		continue;
				    	}
				    	if(mandatory.equals("true")) {
				    		bw.write((" ") + nodeField.get("name") + (" : * ")+ nodeField.path("type").asText() +("\n"));
				    	}
				    	else {
				    		bw.write((" ") + nodeField.get("name") + (" : ")+ nodeField.path("type").asText() +("\n"));
				    	}
				    	if(type.equals("String") || type.equals("PhoneNumber")) {
				    		if(!length.isEmpty()) {
				    			bw.write(" \"length\"" + (" : ") + length + ("\n"));
					    		length=null;
				    		}
				    	}
				    	if(!defaultValue.isEmpty()) {
			    			bw.write(" \"defaultValue\"" + (" : ") + defaultValue + ("\n"));
				    		length=null;
			    		}
					 }
					 
					 bw.write("}\n\n");
				}
				 
				 bw.write("@enduml");
				bw.close();
			}
			catch (Exception e)
			{
			    System.err.println("Could not be written into the file.");
			}
			
		  }
		
	public static Boolean validateAssociations(JsonNode objectNode, HashMap<String, JsonNode> classDescriptions, HashMap<String, String> classAssociations) {
		String nameOfClass = objectNode.path("name").asText();
		ArrayNode nodeFields = (ArrayNode)objectNode.get("fields");
	    int size = nodeFields.size();
	    for(int i=0; i<size; i++) {
	    	JsonNode nodeField = nodeFields.get(i);
	    	String type = nodeField.path("type").asText();
	    	if(type.equals("Association")) {
	    		String referencedEntity = nodeField.path("referencedEntity").asText();
	    		JsonNode root = classDescriptions.get(referencedEntity);
	    		if(root!=null) {
	    			classAssociations.put(nameOfClass,referencedEntity);
	    			return true;
	    		}
	    		
	    	}
	    }
		
		return false;
		
	}
  
		 
    public boolean someLibraryMethod() {
        return true;
    }
    
   
}




